openapi: 3.0.1
info:
  title: Hacker News
  description: "
    This is the Open API documentation for the REST API of our beloved
    application **HackerNews** deployed at
    <https://asw-api-demo.herokuapp.com/>. <br>All operations are executable.
    Only one operation requires authentication: `deleteTweet`. In this case, you
    must **Authorize** your request by providing the api_key vaule you got when
    you created the tweet."
  version: 1.0.0.oas3
servers:
  - url: http://127.0.0.1:8000/api
  - url: https://hacker-news-hn22d.herokuapp.com/
paths:
  /news/:
    get:
      summary: Returns a list of submissions
      description: Optional extended description in Markdown.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
  /comments/{commentId}:
    get:
      summary: Returns a comment found by its ID
      parameters:
        - name: commentID
          in: path
          description: ID of the comment to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'

  /comments/reply:
    post:
      summary: adds a new comment to an existent Comment
      requestBody:
        description: Provide the type, user, text & replied_comment of the new Comment
        content:
          application/json:
            schema:
              required:
                - type
                - user
                - text
                - replied_comment
              type: object
              properties:
                type:
                  type: string
                  enum: [ Submission, Comment ]
                user:
                  type: integer
                  example: 2
                text:
                  type: string
                  example: My content of the comment
                replied_comment:
                  type: integer
                  format: int64
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'

  /comments/submission:
    post:
      summary: adds a new comment to an existent Submission
      requestBody:
        description: Provide the type, user, text & submission of the new Comment
        content:
          application/json:
            schema:
              required:
                - type
                - user
                - text
                - submission
              type: object
              properties:
                type:
                  type: string
                  enum: [ Submission, Comment ]
                user:
                  type: integer
                  example: 2
                text:
                  type: string
                  example: My content of the comment
                submission:
                  type: integer
                  format: int64
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /news/{subm_id}/vote:
    post:
      tags:
        - "Votes"
      summary: It creates a new vote of a submission
      description: ""
      operationId: "addSubmissionVote"
      parameters:
      - name : subm_id
        in : path
        description: Submission id
        required: true
        schema:
          type : integer
          format : int32
      requestBody:
        description: Provide the user of the new Vote
        content:
          application/json:
            schema:
              required:
                - user
              type: object
              properties:
                user:
                  type: integer
                  example: 2
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/VoteVote'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'

    delete:
      tags:
        - "Votes"
      summary: Deletes the vote of a certain submission
      operationId: UnvoteComment
      parameters:
        - name: subm_id
          in: path
          description: Submission id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Provide the user of the new Vote
        content:
          application/json:
            schema:
              required:
                - user
              type: object
              properties:
                user:
                  type: integer
                  example: 2
        required: true
      responses:
        '200':
          description: Vote of submission deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteDelete'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'

  /comments/{comm_id}/vote:
    post:
      tags:
        - "Votes"
      summary: It creates a new vote of a comment
      description: ""
      operationId: "addCommentVote"
      parameters:
        - name: comm_id
          in: path
          description: Comment id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Provide the user of the new Vote
        content:
          application/json:
            schema:
              required:
                - user
              type: object
              properties:
                user:
                  type: integer
                  example: 2
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'

    delete:
      tags:
        - "Votes"
      summary: Deletes the vote of a certain comment
      operationId: UnvoteComment
      parameters:
        - name: comm_id
          in: path
          description: Comment id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Provide the user of the new Vote
        content:
          application/json:
            schema:
              required:
                - user
              type: object
              properties:
                user:
                  type: integer
                  example: 2
        required: true
      responses:
        '200':
          description: Vote of comment deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteDelete'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'


components:
  schemas:
    Submission:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'News title'
        type:
          type: integer
          format: int64
          example: 1
        author:
          type: integer
          format: int64
          example: 1
        url:
          type: string
          example: 'https://www.google.es/'
        text:
          type: string
          example: 'This is an ask or comment'
        points:
          type: integer
          format: int64
          example: 1
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        votes:
          type: array
          items:
            $ref: '#/components/schemas/Vote'
        created_at:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        submission:
          type: integer
          format: int32
        replied_comment:
          type: integer
          format: int32
        type:
          type: string
          enum: [Submission, Comment]
        user:
          type: string
          example: 'admin'
        text:
          type: string
          format: 'This is a comment'
        comments:
          type: array
          items:
            type: string
            example: 'my comment'
        votes:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
    Vote:
      type: object
      properties:
        submission:
          type: integer
          format: int64
        comment:
          type: integer
          format: int64
        type:
          type: integer
          format: int64
        user:
          type: integer
          example: int64
        created_at:
          type: string
          format: date-time

    AddCommentResult:
      type: object
      properties:
        new_tweet:
          $ref: '#/components/schemas/Comment'
        api_key:
          type: string
          example: |
            MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=

    VoteDelete:
      type: object
      properties:
        res:
          type: string
          example: 'Object Deleted'

    VoteVote:
      type: object
      properties:
        new_vote:
          $ref: '#/components/schemas/Vote'

    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum:
            - 400
            - 401
            - 403
            - 404
        error:
          type: string
          enum:
            - Bad Request
            - Unauthorized
            - Forbidden
            - Not Found
        message:
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No Tweet with that ID"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header