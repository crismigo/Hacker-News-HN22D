openapi: 3.0.1
info:
  title: Hacker News
  description: "
    This is the Open API documentation for the REST API of our beloved
    application **HackerNews** deployed at
    <https://hackernews-hn22d.herokuapp.com/>. <br>All operations are executable. 
    All PUT,POST,DELETE and two GET from UPVOTE tag require authentication:  You have to go to the login page of Heroku, log in and then go to your profile and get the APIKEY value, and in the Swagger go to button **Authorize**  and provide the api_key vaule you got when
    you logged in."
  version: 1.0.0.oas3
servers:
  - url: http://127.0.0.1:8000/api
  - url: https://hackernews-hn22d.herokuapp.com/
paths:
  /news/:
    get:
      tags:
        - News
      summary: Returns a paginated list of News, ordered by the number of votes of each one.
      parameters:
        - in: query
          name: page
          required: false
          description: Number of page to display.
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubmissionRead'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    post:
      tags:
        - News
      summary: Creates a new instance of News.
      operationId: NewNews
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        description: Provide the neecesary fields to create a new News.
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'My first news!'
                url:
                  type: string
                  example: 'https://atenea.upc.edu/course/view.php?id=75442'
                text:
                  type: string
                  example: 'My Question is about ...'
              required:
                - title
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '409':
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'
  /news/newest/:
    get:
      tags:
        - News
      summary: Returns a paginated list of News , ordered by the creation of each news from most recent to least recent.
      parameters:
        - in: query
          name: page
          required: false
          description: Number of page to display.
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubmissionRead'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /news/ask:
    get:
      tags:
        - News
      summary: Returns a paginated list of News of type ask , ordered by the number of votes.
      parameters:
        - in: query
          name: page
          required: false
          description: Number of page to display.
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubmissionRead'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /news/{id}/:
    get:
      tags:
        - News
      summary: Return the News with the given id and its comments or error if it doesn't exist.
      description: It returns a unique News.
      operationId: getNewsById
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the News.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubmissionDetailed'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    put:
      tags:
        - News
      summary: Modifies a concrete instance of News.
      operationId: EditNews
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the News to look up.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        description: Provide the necessary fields to modify a new News.
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'Modified News!'
                text:
                  type: string
                  example: 'My question is about ...'
              required:
                - title
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
        - News
      summary: Deletes a News
      operationId: deleteNews
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: id
          in: path
          description: News id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: News Deleted
          content:
            application/json: { }
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'


  /comments/:
    post:
      tags:
        - Comments
      summary: Adds a new comment to an existent Comment or an existent submission.
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        description: Provide the submission or replied_comment,type, & text of the new Comment
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CommentReply'
                - $ref: '#/components/schemas/CommentSubmission'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'

  /comments/{commentId}/:
    get:
      tags:
        - Comments
      summary: Returns a comment found by its ID
      parameters:
        - name: commentId
          in: path
          description: ID of the comment to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'


  /news/{subm_id}/vote/:
    post:
      tags:
        - "Votes"
      summary: It creates a new vote of a submission
      description: ""
      operationId: "addSubmissionVote"
      security:
        - ApiKeyAuth: []
      parameters:
      - name : subm_id
        in : path
        description: Submission id
        required: true
        schema:
          type : integer
          format : int64

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/VoteVote'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '409':
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'

    delete:
      tags:
        - "Votes"
      summary: Deletes the vote of a certain submission
      operationId: UnvoteSubmission
      security:
        - ApiKeyAuth: []
      parameters:
        - name: subm_id
          in: path
          description: Submission id
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: Vote of submission deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteDelete'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'

  /comments/{comm_id}/vote/:
    post:
      tags:
        - "Votes"
      summary: It creates a new vote of a comment
      description: ""
      security:
        - ApiKeyAuth: []
      operationId: "addCommentVote"
      parameters:
        - name: comm_id
          in: path
          description: Comment id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteComm'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '409':
          description: 'Error: Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error409'

    delete:
      tags:
        - "Votes"
      summary: Deletes the vote of a certain comment
      operationId: UnvoteComment
      security:
        - ApiKeyAuth: []
      parameters:
        - name: comm_id
          in: path
          description: Comment id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Vote of comment deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteDelete'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'


  /user/{user_id}/:
    get:
      tags:
        - User
      summary: Return the info of the user with the given id or error if it doesn't exist.
      description: Retorns a unique user.
      operationId: getUserById
      parameters:
        - in: path
          name: user_id
          required: true
          description: The id of the user to look up.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    put:
      tags:
        - User
      summary: Modifies an instance of user.
      operationId: EditUser
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: user_id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        description: Provide the needed camps to modify the user.
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'alex.olle@example.com'
                about:
                  type: string
                  example: "I like..."
              required:
                - email
                - about
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{user_id}/threads/:
    get:
      tags:
        - User
      summary: Returns a list of comments of the user with that user_id.
      description: User Comments.
      parameters:
        - name: user_id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

  /user/{user_id}/submissions/:
    get:
      tags:
        - User
      summary: Returns a list of submissions of the user with that user_id.
      description: User submissions.
      parameters:
        - name: user_id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubmissionRead'
        '400':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'


  /user/upvoted/submissions/:
    get:
      tags:
        - Upvoted
      summary: Returns a list of upvoted submissions of the user with that user_id.
      description: Upvoted submissions from the user.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubmissionRead'
        '400':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
  /user/upvoted/comments/:
    get:
      tags:
        - Upvoted
      summary: Returns a list of upvoted comments of the user with that user_id.
      description: Upvoted comments from the user.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
components:
  schemas:
    CommentReply:
      required:
        - type
        - user
        - text
        - replied_comment
      type: object
      properties:
        type:
          type: string
          enum: [ Comment ]
        user:
          type: integer
          example: 2
        text:
          type: string
          example: My content of the comment
        replied_comment:
          type: integer
          format: int64
    CommentSubmission:
      required:
        - type
        - user
        - text
        - submission
      type: object
      properties:
        type:
          type: string
          enum: [ Submission ]
        user:
          type: integer
          example: 2
        text:
          type: string
          example: My content of the comment
        submission:
          type: integer
          format: int64
    Submission:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'News title'
        type:
          type: integer
          format: int64
          example: 1
        author:
          type: integer
          format: int64
          example: 1
        url:
          type: string
          example: 'https://www.google.es/'
        text:
          type: string
          example: 'This is an ask or comment'
        points:
          type: integer
          format: int64
          example: 1
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        votes:
          type: array
          items:
            $ref: '#/components/schemas/VoteSubm'
        created_at:
          type: string
          format: date-time
    SubmissionDetailed:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'News title'
        type:
          type: string
          example: "url"
        author:
          type: string
          example: "alex.olle"
        url:
          type: string
          example: 'https://www.google.es/'
        text:
          type: string
          example: 'This is an ask or comment'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        votes:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
    SubmissionRead:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'News title'
        type:
          type: string
          example: "url"
        author:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
            username:
              type: string
              example: "alex.olle"
        url:
          type: string
          example: 'https://www.google.es/'
        text:
          type: string
          example: 'This is an ask or comment'
        comments:
          type: integer
          format: int64
          example: 1
        votes:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        submission:
          type: integer
          format: int32
        replied_comment:
          type: integer
          format: int32
        type:
          type: string
          enum: [Submission, Comment]
        user:
          type: string
          example: 'admin'
        text:
          type: string
          format: 'This is a comment'
        comments:
          type: array
          items:
            type: string
            example: 'my comment'
        votes:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
    VoteSubm:
      type: object
      properties:
        submission:
          type: integer
          format: int64
          example: 4
        comment:
          type: string
          example: null
        type:
          type: string
          example: "Submission"
        user:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
    VoteComm:
      type: object
      properties:
        submission:
          type: string
          example: "null"
        comment:
          type: integer
          format: int64
          example: 2
        type:
          type: string
          example: "Comment"
        user:
          type: integer
          format: int64
          example: 3
        created_at:
          type: string
          format: date-time
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "alex.olle"
        email:
          type: string
          example: "alex.olle@gmail.com"
        date_joined:
          type: string
          example: "17/05/2022"
        about:
          type: string
          format: "My hobbies are..."
        apikey:
          type: string
    AddCommentResult:
      type: object
      properties:
        new_tweet:
          $ref: '#/components/schemas/Comment'
        api_key:
          type: string
          example: |
            MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=

    VoteDelete:
      type: object
      properties:
        res:
          type: string
          example: 'Object Deleted'

    VoteVote:
      type: object
      properties:
        new_vote:
          $ref: '#/components/schemas/VoteSubm'

    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum:
            - 400
            - 401
            - 403
            - 404
            - 409
        error:
          type: string
          enum:
            - Bad Request
            - Unauthorized
            - Forbidden
            - Not Found
            - Conflict
        message:
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "The data entered is incorrect"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "The page hasn't been found"
    error409:
      value:
        status: 409
        error: "Conflict"
        message: "The instance already exists"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: API-KEY
      in: header